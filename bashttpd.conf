#
# bashttpd.conf - configuration for bashttpd
#
# The behavior of bashttpd is dictated by the evaluation
# of rules specified in this configuration file.  Each rule
# is evaluated until one is matched.  If no rule is matched,
# bashttpd will serve a 500 Internal Server Error.
#
# The format of the rules are:
#    on_uri_match REGEX command [args]
#    unconditionally command [args]
#
# on_uri_match:
#   On an incoming request, the URI is checked against the specified
#   (bash-supported extended) regular expression, and if encounters a match the
#   specified command is executed with the specified arguments.
#
#   For additional flexibility, on_uri_match will also pass the results of the
#   regular expression match, ${BASH_REMATCH[@]} as additional arguments to the
#   command.
#
# unconditionally:
#   Always serve via the specified command.  Useful for catchall rules.
#
# The following commands are available for use:
#
#   serve_file FILE
#     Statically serves a single file.
#
#   serve_dir_with_tree DIRECTORY
#     Statically serves the specified directory using 'tree'.  It must be
#     installed and in the PATH.
#
#   serve_dir_with_ls DIRECTORY
#     Statically serves the specified directory using 'ls -al'.
#
#   serve_dir  DIRECTORY
#     Statically serves a single directory listing.  Will use 'tree' if it is
#     installed and in the PATH, otherwise, 'ls -al'
#
#   serve_dir_or_file_from DIRECTORY
#     Serves either a directory listing (using serve_dir) or a file (using
#     serve_file).  Constructs local path by appending the specified root
#     directory, and the URI portion of the client request.
#
#   serve_static_string STRING
#     Serves the specified static string with Content-Type text/plain.
#
# Examples of rules:
#
# on_uri_match '^/issue$' serve_file "/etc/issue"
#
#   When a client's requested URI matches the string '/issue', serve them the
#   contents of /etc/issue
#
# on_uri_match 'root' serve_dir /
#
#   When a client's requested URI has the word 'root' in it, serve up
#   a directory listing of /
#
# DOCROOT=/var/www/html
# on_uri_match '/(.*)' serve_dir_or_file_from "$DOCROOT"
#   When any URI request is made, attempt to serve a directory listing
#   or file content based on the request URI, by mapping URI's to local
#   paths relative to the specified "$DOCROOT"
#

urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

# This might not be needed if the browser encodes the URLs for us
urlencode() {
    # urlencode <string>

    local LANG=C
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done
}

# You should set up an nginx location to serve static assets directly
# so that HTTP range requests, etc. are appropriately supported!
# These are here just so that bare-bones local testing works.
serve_data () {
   serve_file "$(pwd)/$1"
}
on_uri_match '/data/(.*)$'    serve_data $(urldecode $2)
on_uri_match '/js/(.*)$'      serve_data $(urldecode $2)
on_uri_match '/style.css$'    serve_data $(urldecode $2)
on_uri_match '/favicon.ico$'  serve_data $(urldecode $2)

serve_ostream() {
   dlpid=$2
   dllog=data/incoming.$dlpid/download.log
   evt=data/incoming.$dlpid/download.evt

   if [ -f $dllog ] ; then
      awk -f ostream.awk $dllog > $evt
      serve_file $evt
   else
      fail_with 404
   fi
}
on_uri_match '/ostream/(.*)$' serve_ostream $(urldecode $2)

serve_settitle() {
   add_response_header "Content-Type" "application/json"
   send_response_ok_exit <<< $(./settitle.sh $(urldecode $2))
}
on_uri_match '/settitle/(.*)$' serve_settitle

serve_trashed() {
   send_response_ok_exit <<< $(./trashed.sh $(urldecode $2))
}
on_uri_match '/trashed$' serve_trashed

serve_trash() {
   send_response_ok_exit <<< $(./trash.sh $(urldecode $2))
}
on_uri_match '/trash(.*)$' serve_trash

serve_add() {
   send_response_ok_exit <<< $(./add.sh $(urldecode $2))
}
on_uri_match '/add/(.*)$' serve_add

serve_index() {
   send_response_ok_exit <<< $(./index.sh $(urldecode $2))
}
on_uri_match '/' serve_index
